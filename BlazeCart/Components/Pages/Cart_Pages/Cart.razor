@page "/cart"
@using BlazeCart.Repositery
@using BlazeCart.Utility
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IShoppingCartRepositery _cartRepositery
@inject IOrderRepositery _orderRepositery
@inject NavigationManager _navigationManager
@attribute [Authorize]

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    @if (ShoppingCarts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>
                    @foreach (var cartItem in ShoppingCarts)
                    {
                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;" src="@cartItem.Product.ImageUrl">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @cartItem.Product.Name
                                        </h4>
                                        <h4>
                                            @cartItem.Product.Price.ToString("C", new CultureInfo("en-IN"))
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((cartItem.Product.Price * cartItem.Count).ToString("C", new CultureInfo("en-IN")))
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span @onclick="() => UpdateCartItem(cartItem.ProductId, -1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@cartItem.Count</b>
                                            </span>
                                            <span @onclick="() => UpdateCartItem(cartItem.ProductId, 1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>
                                        <button class="btn btn-danger" @onclick="() => UpdateCartItem(cartItem.ProductId, -10000)">Remove</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="Order" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                        <DataAnnotationsValidator />
                        <div class="card-body">
                            <div class="form-group">
                                <label>Name</label>
                                <InputText @bind-Value="Order.Name" type="text" class="form-control" />
                                <ValidationMessage For="@(() => Order.Name)" />
                            </div>
                            <div class="form-group">
                                <label>Email : @email</label>
                            </div>
                            <div class="form-group">
                                <label>Phone</label>
                                <InputText @bind-Value="Order.PhoneNumber" type="text" class="form-control" />
                                <ValidationMessage For="@(() => Order.PhoneNumber)" />
                            </div>
                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @Order.OrderTotal.ToString("C", new CultureInfo("en-IN"))
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems
                                    </h4>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                Your cart is empty! Please add items to cart.
            </div>
        </div>
    }
}


@code {
    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
    private bool IsProcessing { get; set; } = true;
    [SupplyParameterFromForm]
    public Order Order { get; set; } = new Order();
    private int TotalItems { get; set; } = 0;
    private string email { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        Order.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        Order.Status = SD.StatusPending;
        await LoadCart();
        IsProcessing = false;
    }

    private async Task LoadCart()
    {
        ShoppingCarts = await _cartRepositery.GetAllAsync(Order.UserId);
        Order.OrderTotal = 0;
        TotalItems = 0;
        foreach (var cart in ShoppingCarts)
        {
            Order.OrderTotal += (Convert.ToDouble(cart.Product.Price) * cart.Count);
            TotalItems += cart.Count;
        }
        Order.OrderTotal = Math.Round(Order.OrderTotal, 2);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        //add item to cart
        var result = await _cartRepositery.UpdateCartAsync(Order.UserId, productId, updateBy);
        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        IsProcessing = true;
        await Task.Yield();
        Order.OrderItems = SD.ConvertShoppingCartListToOrderItem(ShoppingCarts.ToList());

        await _orderRepositery.CreateAsync(Order);
        _navigationManager.NavigateTo($"/order/confirmation/{Order.Id}");
    }
}