@page "/order/list"
@using BlazeCart.Repositery
@using System.Security.Claims
@using BlazeCart.Utility
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@inject IOrderRepositery OrderRepositery

<h3>OrderList</h3>
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (Orders.Any())
            {
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Phone Number</th>
                            <th>Order Total</th>
                            <th>Order Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Orders)
                        {
                            <tr>
                                <td>@obj.Id</td>
                                <td>@obj.Name</td>
                                <td>@obj.PhoneNumber</td>
                                <td>@obj.OrderTotal.ToString("C")</td>
                                <td>@obj.OrderDate</td>
                                <td>@obj.Status</td>
                                <td>
                                    <a href="@($"orders/list/{obj.Id}")" class="btn btn-primary">
                                        <i class="bi bi-pencil-square"></i> Items
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Order> Orders { get; set; } = new List<Order>();

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
        IsProcessing = false;
    }

    private async Task LoadOrders()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthoriztion();
        @if (IsAdmin == true)
        {
            Orders = await OrderRepositery.GetAllAsync();
        }
        else
        {
            Orders = await OrderRepositery.GetAllAsync(UserId);
        }
        // Load categories

        IsProcessing = false;
    }

    private async Task CheckAuthoriztion()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}
