@page "/product/create"
@page "/product/update/{id:int}"
@inject ICategoryRepositery _categoryRepositery
@inject IProductRepositery _productRepositery

@inject IJSRuntime _JS
@inject NavigationManager _navigationManager


@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id>0?"Update":"Create")</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name" placeholder="Name" />
                        <label for="name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="Description" placeholder="Description" />
                        <label for="description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select" id="Category" placeholder="Category" >
                            <option value="0" selected disabled> --Select Category-- </option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => Product.Category)" />
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy2-fill"></i> @(Id == 0 ? "Create" : "Update")
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to List
                            </a>
                        </div>
                    </div>
                </div>

            </EditForm>

        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }
    // means this is a Blazor component for upserting(update/insert) products in a BlazeCart application.

    private bool IsProcessing { get; set; } = true;

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    protected override async Task OnInitializedAsync()
    {
        await LoadProductAndCategoryList();
        IsProcessing = false;
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepositery.GetAsync(Id);
        }
        Categories = await _categoryRepositery.GetAllAsync();
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (Id > 0)
        {
            await _productRepositery.UpdateAsync(Product);
            await _JS.ToastrSuccess("Product Updated Successfully");
        }
        else
        {
            await _productRepositery.CreateAsync(Product);
            await _JS.ToastrSuccess("Product Created Successfully");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("product");
    }

}
